#!/bin/bash -O extglob

# Executable preamble
mydir="$(dirname $0)"
pushd "$mydir/.." > /dev/null; dotfun="$(pwd)"; popd > /dev/null
funlib="${dotfun}/lib"
dotfiles="${dotfun}"
[[ -d "$dotfun/../dotfiles" ]] && dotfiles="$dotfun/../dotfiles"
libdir="${dotfiles}/lib"

# Imports
. "${libdir}/Lib.sh"
. "${libdir}/Module.sh"
. "${libdir}/CLI.sh"
. "${libdir}/Git.sh"
. "${libdir}/Branch.sh"
. "${libdir}/Assembly.sh"
. "${funlib}/Fundle.sh"
. "${funlib}/FunDotParams.sh"

# MARK: Globals
G_ALL_ACTIONS=(
	"__build"
	"__master"
	"__test"
)

# We only pick from the instances that run a Linux of some sort -- others are
# either not up or running CentOS. Also, there is no fun-on-demand-00; the
# cluster starts at -01.
G_USEABLE_INSTANCES=(
	1
	4
	5
)

# Parsed options
GIT_PARSEOPT_SPEC="\
git-funfetti [options] ACTION PRODUCT [-- [BOOT-ARG BOOT-ARG ...]]

Fun-on-demand driver which automates the process of building a DPU firmware \
bundle for the specified PRODUCT with the firmware components specified by the \
user. The user may specify one of the following ACTIONs:

    build          performs project builds only
    master         builds projects and then masters the resulting images into \
a test bundle
    test           masters the test bundle and submits it to the Fun-on-Demand \
service for testing

The following firmwares are supported and may be given as arguments to the \
f,firmware option:

    FunOS          The main FunOS image
    FunSDK-small   The minimal FunOS SDK required to build FunOS
    FunTest        The repository where central test scripts reside

Firmwares may be built for different platforms, and by default they are built \
for the platform associated with PRODUCT. The following PLATFORMs may be given \
as arguments to the p,platform option to override this:

    soc       The physical SoC target
    posix     The POSIX simulator target
    qemu      The QEMU emulator platform
    emu       The Palladium FPGA platform

Images may be built as different variants, and by default, the debug variants \
are built. The following VARIANTs may be given as arguments to the V,variant \
option:

    release      Omits virtually all debugging functionality
    noasan       Similar to debug, except that the Address Sanitizer is disabled
    debug        Includes all debugging functionality

$(CLI.get_stuckopt_blurb)
--
 Available options
f,firmware=FIRMWARE[@BASE]   A firmware image to build. This may be specified \
multiple times, in which case several images are built and deployed to \
fun-on-demand. If a BASE is included in the argument, that ref of the project \
is used as the merge base, otherwise the tag in the TAG-COLLECTION is used

b,merge-branch=FIRMWARE:BRANCH-NAME \
                             A branch to merge into FIRMWARE before building. \
This option may be specified multiple times, in which case the branches are \
merged in the order specified. The magic value GIT_BRANCH may be given to \
indicate refer to the currently checked-out branch in the working git \
repository

t,tag-collection=TAG-COLLECTION \
                             A file containing a JSON dictionary which maps \
firmwares to tag names. This can be thought of as a release manifest. When the \
dependencies for a firmware are discovered, the tags from this collection are \
used. If not provided, the base tag of the working git repository is assumed \
to be a valid tag for each project in the assembly and used as the base

P,parameters=DOT-PARAMS-FILE \
                             Perform the build and test according to the \
parameters in DOT-PARAMS-FILE. If email addresses and boot-args are specified \
at the command line, they will be appended to the values from DOT-PARAMS-FILE. \
Other command line-supplied values will override those of the DOT-PARAMS-FILE

B,build-cycle=full|iterative|skip \
                             The type of build cycle to execute. A 'full' \
build will perform the project's clean command and a 'git clean' of the \
repository before building. An 'iterative' build will not perform either of \
these operations before building. A 'skip' cycle will not perform any build \
commands at all, and it expects the necessary artifacts to already exist

s,build-style=FIRMWARE:BUILD-STYLE \
                             Use the additional build options for BUILD-STYLE \
when building FIRMWARE. The project specification for FIRMWARE must define a \
BuildStyle corresponding to BUILD-STYLE. This option may be specified multiple \
times to set a build style for each firmware. If multiple BUILD-STYLEs are \
given for a single FIRMWARE, the one used is undefined

p,platform=PLATFORM           The platform to build for. If specified, this \
overrides the platform present in the machine specification associated with \
the PRODUCT

V,variant=VARIANT             The variant to build

o,output-bundle=OUTPUT-BUNDLE-PATH \
                              Write the resulting test bundle to \
OUTPUT-BUNDLE-PATH. This path represents the root of the bundle, not the \
directory which contains the bundle. Any required ancestor directories are \
created via 'mkdir -p', and the bundle will be overwritten if it already \
exists. If unspecified, the bundle is written to a temporary location

n,cluster-number=NUMBER       The specific fun-on-demand server to connect to \
for operations. If unspecified, one is chosen at random

m,email-address=EMAIL-ADDRESS Add EMAIL-ADDRESS to the list of email addresses \
that should receive status updates for the job. This can be specified multiple \
times. The email address in the user.email gitconfig(7) variable of the \
working repository is included implicitly

$(CLI.get_global_blurb)
"

O_FIRMWARES=()
O_BRANCHES=()
O_TAG_COLLECTION=
O_PARAMETERS=
O_BUILD_CYCLE=
O_STYLES=()
O_PLATFORM=
O_VARIANT=
O_HOST=
O_OUTPUT_BUNDLE=
O_EMAIL_ADDRESSES=()

O_ACTION=
O_ACTIONS=()
O_PRODUCT=

# MARK: Utilities
function derive_machine()
{
	local chip="$1"
	local p_suffix=
	local v_suffix=

	case "$O_PLATFORM" in
	soc)
		;;
	posix|emu|qemu)
		p_suffix="-$O_PLATFORM"
		;;
	esac

	case "$O_VARIANT" in
	release|noasan)
		v_suffix="-$O_VARIANT"
		;;
	debug)
		;;
	esac

	echo "${chip}${p_suffix}${v_suffix}"
}

function synthesize_tag_collection()
{
	local f=$(CLI.get_run_state_path "tags")
	local t=
	local pd=

	t=$(Git.get_base_tag)
	CLI.die_ifz "$t" "cannot determine base tag from repo"

	pd=$(Module.find_resource "share/funproj")
	CLI.die_ifz "$pd" "no fungible project specifications found"

	Plist.init_with_raw "json" '{}'

	# Just go through every project we have a specification for and set its base
	# tag to be that of the repository. The nightly Jenkins builds should
	# produce aligned tags.
	for p in $(ls "$pd"); do
		local pn=

		pn=$(basename -s '.json' "$p")
		Plist.set_value "$pn" "string" "$t"
	done

	CLI.status "writing synthesized tag collection to: $f"
	Plist.write "$f"
	echo "$f"
}

function assembly_callback()
{
	local type="$1"
	local p="$2"

	CLI.status "got assembly callback: type = $type, project = $p"

	case "$type" in
	image)
		local type="$3"
		local img="$4"
		local v_arg=$(CLI.get_verbosity_opt "dv")
		local excat="bin/scripts/excat.py"

		CLI.status "image callback: type = $type, img = $img"

		if [ "$type" = "rich" ]; then
			CLI.status "publishing symbols: $img"

			Assembly.run_tool "FunSDK-small" "$excat" $v_arg pub "$img"
			CLI.die_check $? "publish symbols"
		fi
		;;
	*)
		;;
	esac
}

function init_assembly()
{
	local chip="$1"
	local cb="$2"
	local pd="share/funproj"
	local target=
	local variant=
	local cflags=

	# Parameter files have build stuff in them too, so ingest those parameters
	# to set up the assembly. We need to know the variant in order to give the
	# assembly the right target.
	if [ -n "$O_PARAMETERS" ]; then
		FunDotParams.init_with_file "$O_PARAMETERS"
		variant=$(FunDotParams.get_value "BLD_TYPE")
		if [ -n "$variant" ]; then
			O_VARIANT="$variant"
		fi

		cflags=$(FunDotParams.get_value "FUNOS_MAKEFLAGS")
	fi

	target=$(derive_machine "$chip")
	Assembly.init "$target" "$O_TAG_COLLECTION" "$pd" "$cb" "${O_FIRMWARES[@]}"

	if [ -n "$cflags" ]; then
		# If the assembly isn't building FunOS, then this won't do anything.
		Assembly.add_cflags "FunOS" "$cflags"
	fi
}

# MARK: Actions
function __build()
{
	local chip="$1"
	local target=
	local variant=
	local cflags=
	local pvmap=(
		"CHIP" "$chip"
	)
	local i=0

	# Parameter files have build stuff in them too, so ingest those parameters
	# to set up the assembly. We need to know the variant in order to give the
	# assembly the right target.
	if [ -n "$O_PARAMETERS" ]; then
		FunDotParams.init_with_file "$O_PARAMETERS"
		variant=$(FunDotParams.get_value "BLD_TYPE")
		if [ -n "$variant" ]; then
			O_VARIANT="$variant"
		fi

		cflags=$(FunDotParams.get_value "FUNOS_MAKEFLAGS")
	fi

	target=$(derive_machine "$chip")
	Assembly.init "$target" \
			"$O_TAG_COLLECTION" \
			"share/funproj" \
			"assembly_callback" \
			"${O_FIRMWARES[@]}"

	if [ -n "$cflags" ]; then
		# If the assembly isn't building FunOS, then this won't do anything.
		Assembly.add_cflags "FunOS" "$cflags"
	fi

	for (( i = 0; i < ${#pvmap[@]}; i += 2 )); do
		local v="${pvmap[$(( i + 0 ))]}"
		local vv="${pvmap[$(( i + 1 ))]}"

		Assembly.set_variable "$v" "$vv"
	done

	for (( i = 0; i < ${#O_BRANCHES[@]}; i += 2 )); do
		local fw=${O_BRANCHES[$(( i + 0 ))]}
		local b=${O_BRANCHES[$(( i + 1 ))]}

		Assembly.merge_branch "$fw" "$b"
	done

	for (( i = 0; i < ${#O_STYLES[@]}; i += 2 )); do
		local fw=${O_STYLES[$(( i + 0 ))]}
		local s=${O_STYLES[$(( i + 1 ))]}

		Assembly.set_build_style "$fw" "$s"
	done

	if [ -n "$O_BUILD_CYCLE" ]; then
		Assembly.set_build_cycle "$O_BUILD_CYCLE"
	fi

	Assembly.assemble
	CLI.die_check $? "DPU assembly failed"
}

function __master()
{
	local chip="$1"
	local email=$(Git.run config user.email)
	local imgroot=$(Assembly.get_image_root)
	local bug_id=
	local branch=

	bug_id=$(Branch.guess_primary_problem)
	CLI.die_ifz "$bug_id" "failed to guess branch problem"

	branch=$(Git.get_current_branch)
	CLI.die_ifz "$branch" "failed to get current branch"

	Fundle.init "$bug_id" "$branch" "$O_PRODUCT" "$chip" "$imgroot" "$email"
	if [ -n "$O_PARAMETERS" ]; then
		Fundle.set_params "$O_PARAMETERS"
	fi

	for em in "${O_EMAIL_ADDRESSES[@]}"; do
		Fundle.add_email "$em"
	done

	shift
	for ba in "$@"; do
		Fundle.add_boot_arg "$ba"
	done

	Fundle.package "signed"

	if [ -n "$O_OUTPUT_BUNDLE" ]; then
		local root=$(Fundle.get_root)

		CLI.command_noerr mkdir -p "$O_OUTPUT_BUNDLE"
		CLI.command_noerr rm -rf "$O_OUTPUT_BUNDLE"

		cp_clone -R "$root" "$O_OUTPUT_BUNDLE"
	fi
}

function __test()
{
	local chip="$1"
	local v_arg=$(CLI.get_verbosity_opt "dv")

	# Check to see if we're set up for ssh keys on the host. Note that the
	# configuration file sets the username to use for the fun-on-demand cluster.
	CLI.command ssh -vn \
			-o 'PasswordAuthentication no' \
			-o 'BatchMode yes' \
			"$O_HOST" 2>&1 | grep -qE '^Authenticated to'
	if [ $? -ne 0 ]; then
		CLI.warn "bootstrapping authentication to $O_HOST..."

		CLI.command sshauth $v_arg -k "$HOME/.ssh/id_rsa4k.pub" "$O_HOST"
		CLI.die_check $? "authentication failed: $O_HOST"
	fi

	Fundle.submit "$O_HOST"
}

# MARK: Command Implementation
function __cmd()
{
	local md=
	local m=
	local m_platform=
	local chip=

	md=$(Fundle.get_model_descriptor "$O_PRODUCT")
	CLI.die_ifz "$md" "failed to get machine descriptor: $O_PRODUCT"
	CLI.debug "machine descriptor: $O_PRODUCT => $md"

	Plist.init_with_raw "json" "$md"
	m=$(Plist.get_value "machine_targets" "string")
	CLI.die_ifz "$m" "failed to query machine target from: $md"

	# The hardware model is case-sensitive on the run_f1 side, but we let the
	# user specify any case they want, so re-normalize it based on what's in the
	# descriptor.
	O_PRODUCT=$(Plist.get_value "hardware_model" "string")

	# Find the chip and platform from the machine.
	chip=${m%-*}

	m_platform=${machine#*-}
	if [ -z "$m_platform" ]; then
		m_platform="soc"
	fi

	if [ -z "$O_PLATFORM" ]; then
		# If a platform was provided on the command line, it wins. Otherwise,
		# derive it from the machine.
		O_PLATFORM="$m_platform"
	fi

	for a in ${O_ACTIONS[@]}; do
		$a "$chip" "$@"
	done
}

function __main()
{
	local me="$(basename ${BASH_SOURCE[0]})"
	local p=
	local base=
	local branch=
	local action_found=

	CLI.init "$me" "$GIT_PARSEOPT_SPEC" "$@"
	eval "$(echo "$GIT_PARSEOPT_SPEC" |
		git rev-parse --parseopt --keep-dashdash --stuck-long -- "$@" \
				|| echo exit $?
	)"

	while [ $# -ne 0 ]; do
		local arg="$(CLI.parse_argument "$1")"
		local arg_opt=()
		local fw=
		local fwat=
		local fwb=
		local fws=

		case "$1" in
		-f | --firmware=*)
			arg_opt=($(CLI.split_specifier_nospace '@' "$arg"))
			fw="${arg_opt[0]}"
			fwat="$(initdefault "${arg_opt[1]}" "collection")"

			O_FIRMWARES+=("$fw" "$fwat")
			shift
			;;
		-b | --merge-branch=*)
			arg_opt=($(CLI.split_specifier_nospace ':' "$arg"))
			fw="${arg_opt[0]}"
			fwb="${arg_opt[1]}"
			CLI.die_ifz "$fwb" "invalid branch specifier: $arg"

			O_BRANCHES+=("$fw" "$fwb")
			shift
			;;
		-t | --tag-collection=*)
			O_TAG_COLLECTION="$arg"
			shift
			;;
		-P | --parameters=*)
			O_PARAMETERS="$arg"
			shift
			;;
		-B | --build-cycle=*)
			case "$arg" in
			full|iterative|skip)
				O_BUILD_CYCLE="$arg"
				;;
			*)
				CLI.die_badopt "$arg" "build cycle"
				;;
			esac

			shift
			;;
		-s | --build-style=*)
			arg_opt=($(CLI.split_specifier_nospace ':' "$arg"))
			fw="${arg_opt[0]}"
			fws="${arg_opt[1]}"
			CLI.die_ifz "$fws" "invalid style specifier: $arg"

			O_STYLES+=("$fw" "$fws")
			shift
			;;
		-p | --platform=*)
			O_PLATFORM="$arg"
			shift
			;;
		-V | --variant=*)
			O_VARIANT="$arg"
			shift
			;;
		-o | --output-bundle=*)
			O_OUTPUT_BUNDLE="$arg"
			shift
			;;
		-n | --cluster-number=*)
			O_HOST="$arg"
			shift
			;;
		-m | --email-address=*)
			O_EMAIL_ADDRESSES+=("$arg")
			shift
			;;
		--)
			shift
			break
			;;
		-*)
			# This was one of the common options that was already consumed by
			# the CLI module. git-rev-parse will not have normalized an
			# unrecognized option.
			shift
			;;
		*)
			break
			;;
		esac
	done

	CLI.init_git
	if [ -z "$O_TAG_COLLECTION" ]; then
		O_TAG_COLLECTION=$(synthesize_tag_collection)
		CLI.die_ifz "$O_TAG_COLLECTION" "failed to synthesize tag collection"
	fi

	# Implicitly add the currently-active git repository's branch to the
	# firmware list. If the user provides the firmware with a different base
	# tag, then the Assembly will automatically update itself, so we don't need
	# to do anything special to catch that case.
	p=$(Git.get_name)
	branch=$(Git.get_current_branch)

	O_FIRMWARES+=("$p" "collection")
	O_BRANCHES+=("$p" "$branch")

	if [ -z "$O_HOST" ]; then
		local x=
		local cnt=${#G_USEABLE_INSTANCES[@]}

		x=$(rand 4 "u")
		x=$(( (x % cnt) + 1 ))
		O_HOST=${G_USEABLE_INSTANCES[$x]}
	fi

	O_HOST=$(printf '%02d' "$O_HOST")
	O_HOST="fun-on-demand-$O_HOST"
	CLI.status "using host: $O_HOST"

	if [ $# -lt 2 -o "$1" == "--" ]; then
		CLI.die "must provide an action and chip"
	fi

	O_ACTION="$1"
	O_PRODUCT="$2"
	shift 2

	# Go through the list of all actions and include everything up to and
	# including the specified action.
	for a in ${G_ALL_ACTIONS[@]}; do
		CLI.status "will perform action: $a"
		O_ACTIONS+=("$a")

		if [ "$a" = "__$O_ACTION" ]; then
			action_found="$a"
			break
		fi
	done

	CLI.die_ifz "$action_found" "invalid action: $O_ACTION"

	if [ "$1" == "--" ]; then
		shift
	fi

	__cmd "$@"
}

__main "$@"
