#!/bin/bash -O extglob

# Executable preamble
mydir="$(dirname $0)"
pushd "$mydir/.." > /dev/null; dotfun="$(pwd)"; popd > /dev/null
funlib="${dotfun}/lib"
dotfiles="${dotfun}"
[[ -d "$dotfun/../dotfiles" ]] && dotfiles="$dotfun/../dotfiles"
libdir="${dotfiles}/lib"

# Imports
. "${libdir}/Lib.sh"
. "${libdir}/Module.sh"
. "${libdir}/CLI.sh"
. "${libdir}/Git.sh"
. "${libdir}/Branch.sh"
. "${libdir}/Assembly.sh"
. "${funlib}/Fundle.sh"
. "${funlib}/FunDotParams.sh"

# MARK: Globals
G_GENERIC_ACTIONS=(
	"__build"
	"__master"
)
G_TEST_ACTIONS=(
	"__fod"
	"__run"
	"__debug"
)

# We only pick from the instances that run a Linux of some sort -- others are
# either not up or running CentOS. Also, there is no fun-on-demand-00; the
# cluster starts at -01.
G_USEABLE_INSTANCES=(
	1
	4
	5
)

G_PROJECT=

# Parsed options
GIT_PARSEOPT_SPEC="\
git-funfetti [options] ACTION PRODUCT [-- [BOOT-ARG BOOT-ARG ...]]

Fun-on-demand driver which automates the process of building a DPU firmware \
bundle for the specified PRODUCT with the firmware components specified by the \
user. The user may specify one of the following ACTIONs:

    build          performs project builds only
    master         builds projects and then masters the resulting images into \
a test bundle
    fod            masters the test bundle and submits it to the Fun-on-Demand \
service for testing -- this can only be used for the 'soc' PLATFORM
    run            masters the test bundle and runs it locally -- this can \
only be used for the 'posix' and 'qemu' PLATFORMs

The following firmwares are supported and may be given as arguments to the \
f,firmware option:

    FunOS          The main FunOS image
    FunSDK         The SDK required to build FunOS and its components
    FunTest        The repository where central test scripts reside

Firmwares may be built for different platforms, and by default they are built \
for the platform associated with PRODUCT. The following PLATFORMs may be given \
as arguments to the p,platform option to override this:

    soc       The physical SoC target
    posix     The POSIX simulator target
    qemu      The QEMU emulator platform
    emu       The Palladium FPGA platform

Images may be built as different variants, and by default, the debug variants \
are built. The following VARIANTs may be given as arguments to the V,variant \
option:

    release      Omits virtually all debugging functionality
    noasan       Similar to debug, except that the Address Sanitizer is disabled
    debug        Includes all debugging functionality

$(CLI.get_stuckopt_blurb)
--
 Available options
p,project=PROJECT[@BASE]     The merge base for a project to build. If BASE is \
not specified, the base in the tag collection is used. If no merge branches \
are specified for PROJECT, the specified base version is rebuilt

b,merge-branch=FIRMWARE:BRANCH-NAME \
                             A branch to merge into FIRMWARE before building. \
This option may be specified multiple times, in which case the branches are \
merged in the order specified. The magic value GIT_BRANCH may be given to \
indicate refer to the currently checked-out branch in the working git \
repository

t,tag-collection=TAG-COLLECTION \
                             A file containing a JSON dictionary which maps \
firmwares to tag names. This can be thought of as a release manifest. When the \
dependencies for a firmware are discovered, the tags from this collection are \
used. If not provided, the base tag of the working git repository is assumed \
to be a valid tag for each project in the assembly and used as the base

T,test-parameters=DOT-PARAMS-FILE \
                             Perform the build and test according to the \
parameters in DOT-PARAMS-FILE. If email addresses and boot-args are specified \
at the command line, they will be appended to the values from DOT-PARAMS-FILE. \
Other command line-supplied values will override those of the DOT-PARAMS-FILE. \
If DOT-PARAMS-FILE begins with the '@' character, the argument is the name of \
a test in the workspace's FunDevelopment repository

w,workspace?=WORKSPACE \
Use WORKSPACE as the workspace directory for all operations, including cloning \
repositories, building images, etc. If WORKSPACE is not given, then the parent \
directory of the working directory is used. If this option is not specified, a \
temporary directory associated with the current boot session is used

W,live-workspace          Assume that the workspace is being actively used \
outside of the git-funfetti build flow and that it is already in the exact \
state required to perform build operations. This will skip any git operations \
on the repositories in the workspace, and all base refs (specified via \
p,project) and branch merges (specified by b,merge-branch) will be ignored. \
The workspace is expected to be populated with all required projects. This \
option causes the default build cycle to be changed from 'full' to 'iterative'

B,build-cycle=skip|iterative|full|world \
                             The type of build cycle to execute. A 'skip' \
cycle does not perform any build actions at all, and it expects any images to \
have already been produced. An 'iterative' cycle re-runs each project's Build \
command to take advantage of any dependency tracking, and best efforts are \
made to not change mtimes on files which have not changed since the last \
successful merge of a branch. A 'full' build will perform each project's Clean \
command before building. A 'world' build will perform each project's CleanSDK \
and InstallSDK commands before building each project. If unspecified, a 'full' \
build is performed

s,build-style=FIRMWARE:BUILD-STYLE \
                             Use the additional build options for BUILD-STYLE \
when building FIRMWARE. The project specification for FIRMWARE must define a \
BuildStyle corresponding to BUILD-STYLE. This option may be specified multiple \
times to set a build style for each firmware. If multiple BUILD-STYLEs are \
given for a single FIRMWARE, the one used is undefined

M,makeflag=MAKEFLAG           Pass MAKEFLAG to the project build. This option \
may be specified multiple times

j,job-multiplier=MULTIPLIER   Multiply NCPU by MULTIPLIER when determining the \
desired parallelism for build. If unspecified, the default is 2

P,platform=PLATFORM           The platform to build for. If specified, this \
overrides the platform present in the machine specification associated with \
the PRODUCT

V,variant=VARIANT             The variant to build

o,output-bundle=OUTPUT-BUNDLE-PATH \
                              Write the resulting test bundle to \
OUTPUT-BUNDLE-PATH. This path represents the root of the bundle, not the \
directory which contains the bundle. Any required ancestor directories are \
created via 'mkdir -p', and the bundle will be overwritten if it already \
exists. If unspecified, the bundle is written to a temporary location

n,cluster-number=NUMBER       The specific fun-on-demand server to connect to \
when performing the 'fod' ACTION. If unspecified, one is chosen at random

m,email-address=EMAIL-ADDRESS Add EMAIL-ADDRESS to the list of email addresses \
that should receive status updates for the job. This can be specified multiple \
times. The email address in the user.email gitconfig(7) variable of the \
working repository is included implicitly

 Options for 'run' and 'debug'
g,debug?=PORT                 Runs FunOS with a debug server attached and \
optionally advertising on PORT. Qemu targets will advertise on port 1234 by \
default, and POSIX targets will advertise on port 4321 by default

S,dpc-server                  Enable the data plane control (DPC) server on \
FunOS when using the 'run' or 'debug' actions

$(CLI.get_global_blurb)
"

O_PROJECTS=()
O_BRANCHES=()
O_TAG_COLLECTION=
O_TEST_PARAMETERS=
O_WORKSPACE=
O_LIVE_WORKSPACE=
O_BUILD_CYCLE=
O_STYLES=()
O_MAKEFLAGS=()
O_JOB_MULTIPLIER=2
O_PLATFORM=
O_VARIANT=
O_HOST=
O_OUTPUT_BUNDLE=
O_EMAIL_ADDRESSES=()
O_DEBUG_SERVER=
O_DPC_SERVER=

O_ACTION=
O_ACTIONS=()
O_PRODUCT=

# MARK: Utilities
function derive_machine()
{
	local chip="$1"
	local p_suffix=
	local v_suffix=

	case "$O_PLATFORM" in
	soc)
		;;
	posix|emu|qemu)
		p_suffix="-$O_PLATFORM"
		;;
	esac

	case "$O_VARIANT" in
	release|noasan)
		v_suffix="-$O_VARIANT"
		;;
	debug)
		;;
	esac

	echo "${chip}${p_suffix}${v_suffix}"
}

function synthesize_tag_collection()
{
	local f=$(CLI.get_run_state_path "tags")
	local t=
	local pd=

	t=$(Git.get_base_tag)
	CLI.die_ifz "$t" "cannot determine base tag from repo"

	pd=$(Module.find_resource "share/proj/fun")
	CLI.die_ifz "$pd" "no fungible project specifications found"

	Plist.init_with_raw "json" '{}'

	# Just go through every project we have a specification for and set its base
	# tag to be that of the repository. The nightly Jenkins builds should
	# produce aligned tags.
	for p in $(ls "$pd"); do
		local pn=

		pn=$(basename -s '.json' "$p")
		Plist.set_value "$pn" "string" "$t"
	done

	CLI.debug "writing synthesized tag collection to: $f"
	Plist.write "$f"
	echo "$f"
}

function assembly_callback()
{
	local type="$1"
	local p="$2"

	CLI.debug "got assembly callback: type = $type, project = $p"

	case "$type" in
	stage)
		# If no build cycle was specified, and we're handling FunSDK in the
		# dependency graph, then do a bit of guesswork to see if we need to do
		# a world build, which will set up the SDK. This is re-entrant, but
		# whatever, it's just bash. If we're merging multiple branches into
		# FunSDK, this will happen each time, but it should always produce the
		# same result, so we don't care. If this is the first clone of FunSDK,
		# then we won't have a build_info.txt, and we'll do the world build.
		if [ -z "$O_BUILD_CYCLE" ] && [ "$p" = "FunSDK" ] ; then
			local v_build=$(q2 cat "build_info.txt")
			local v_asm=$(Assembly._lookup_tag_have_project "$p" "t")

			# If we're using a live workspace, then we don't touch the SDK and
			# assume that the caller has done everything required.
			if [ -n "$O_LIVE_WORKSPACE" ]; then
				v_build="$v_asm"
			elif [ -z "$v_build" ]; then
				v_build="<unset>"
			fi

			if [ "$v_build" != "$v_asm" ]; then
				CLI.status "sdk out of date; doing world build:" \
						"actual = $v_build, expected = $v_asm"
				Assembly.set_build_cycle "world"
			else
				CLI.status "sdk does not need re-installing: $v_build"
			fi
		fi
		;;
	merge)
		;;
	image)
		local type="$3"
		local img="$4"
		local v_arg=$(CLI.get_verbosity_opt "dv")
		local excat="bin/scripts/excat.py"

		CLI.debug "image callback: type = $type, img = $img"

		if [ "$O_PLATFORM" != "posix" ] && [ "$type" = "rich" ]; then
			CLI.status "publishing symbols: $img"

			Assembly.run_tool "FunSDK" "$excat" $v_arg pub "$img"
			CLI.die_check $? "publish symbols"
		fi
		;;
	*)
		;;
	esac
}

# MARK: Actions
function __build()
{
	local chip="$1"
	local opts="$2"
	local target=
	local tags="$O_TAG_COLLECTION"
	local ws="$O_WORKSPACE"
	local variant=
	local cflags=
	local pvmap=(
		"CHIP" "$chip"
	)
	local i=0

	# Parameter files have build stuff in them too, so ingest those parameters
	# to set up the assembly. We need to know the variant in order to give the
	# assembly the right target.
	if [ -n "$O_TEST_PARAMETERS" ]; then
		FunDotParams.init_with_file "$O_TEST_PARAMETERS"
		variant=$(FunDotParams.get_value "BLD_TYPE")
		if [ -n "$variant" ]; then
			O_VARIANT="$variant"
		fi

		cflags=$(FunDotParams.get_value "FUNOS_MAKEFLAGS")
	fi

	target=$(derive_machine "$chip")
	Assembly.init "$target" "$tags" "$ws" "fun" "${O_PROJECTS[@]}"
	Assembly.set_callback "assembly_callback"
	Assembly.set_parallel_factor "$O_JOB_MULTIPLIER"

	if [ -n "$O_LIVE_WORKSPACE" ]; then
		Assembly.set_live_workspace
	fi

	# Do this after we've made the assembly use a working workspace to ensure
	# that the user's specified build cycle is respected.
	if [ -n "$O_BUILD_CYCLE" ]; then
		Assembly.set_build_cycle "$O_BUILD_CYCLE"
	fi

	if [ -n "$cflags" ]; then
		# If the assembly isn't building FunOS, then this won't do anything.
		CLI.status "adding FunOS flags: ${O_MAKEFLAGS[@]}"
		Assembly.add_cflags "FunOS" "$cflags"
	fi

	if [ ${#O_MAKEFLAGS[@]} -gt 0 ]; then
		CLI.status "adding make flags: ${O_MAKEFLAGS[@]}"
		Assembly.add_cflags "$G_PROJECT" "${O_MAKEFLAGS[@]}"
	fi

	for (( i = 0; i < ${#pvmap[@]}; i += 2 )); do
		local v="${pvmap[$(( i + 0 ))]}"
		local vv="${pvmap[$(( i + 1 ))]}"

		Assembly.set_variable "$v" "$vv"
	done

	for (( i = 0; i < ${#O_BRANCHES[@]}; i += 2 )); do
		local fw=${O_BRANCHES[$(( i + 0 ))]}
		local b=${O_BRANCHES[$(( i + 1 ))]}

		CLI.status "will merge branch: $fw <= $b"
		Assembly.merge_branch "$fw" "$b"
	done

	for (( i = 0; i < ${#O_STYLES[@]}; i += 2 )); do
		local fw=${O_STYLES[$(( i + 0 ))]}
		local s=${O_STYLES[$(( i + 1 ))]}

		CLI.status "setting build style: $fw: $b"
		Assembly.set_build_style "$fw" "$s"
	done

	# If a FunSDK base tag was specified, then use that value as the SDK_VERSION
	# variable. Otherwise, we have to query the tag collection.
	for (( i = 0; i < ${#O_PROJECTS[@]}; i += 2 )); do
		local pi=${O_PROJECTS[$(( i + 0 ))]}
		local vi=${O_PROJECTS[$(( i + 1 ))]}

		if [ "$pi" = "FunSDK" ] && [ "$vi" != "collection" ]; then
			v_sdk="$vi"
			break
		fi
	done

	# We should always have a FunSDK tag in the collection.
	if [ -z "$v_sdk" ]; then
		v_sdk=$(Assembly.lookup_tag "$p" "t")
		CLI.die_ifz "$v_sdk" "no FunSDK in assembly"
	fi

	Assembly.set_variable "SDK_VERSION" "$v_sdk"
	CLI.status "using sdk version: $v_sdk"

	Assembly.assemble
	CLI.die_check $? "DPU assembly failed"
}

function __master()
{
	local chip="$1"
	local opts="$2"
	local email=$(Git.run config user.email)
	local imgroot=$(Assembly.get_image_root)
	local bug_id=
	local branch=
	local which=

	branch=$(Git.get_current_branch)
	CLI.die_ifz "$branch" "failed to get current branch"

	bug_id=$(Branch.guess_primary_problem)
	if [ -z "$bug_id" ]; then
		bug_id="BRANCH-$branch"
	fi

	Fundle.init "$bug_id" "$branch" "$O_PRODUCT" "$chip" "$imgroot" "$email"
	if [ -n "$O_TEST_PARAMETERS" ]; then
		Fundle.set_params "$O_TEST_PARAMETERS"
	fi

	for em in "${O_EMAIL_ADDRESSES[@]}"; do
		Fundle.add_email "$em"
	done

	shift 2
	for ba in "$@"; do
		Fundle.add_boot_arg "$ba"
	done

	case "$O_PLATFORM" in
	soc|emu)
		which="signed"
		;;
	posix|qemu)
		which="rich"
		;;
	esac

	Fundle.package "$O_PLATFORM" "$which"

	if [ -n "$O_OUTPUT_BUNDLE" ]; then
		local root=$(Fundle.get_root)

		CLI.run_noerr mkdir -p "$O_OUTPUT_BUNDLE"
		CLI.run_noerr rm -rf "$O_OUTPUT_BUNDLE"

		cp_clone -R "$root" "$O_OUTPUT_BUNDLE"
	fi
}

function __fod()
{
	local chip="$1"
	local opts="$2"
	local v_arg=$(CLI.get_verbosity_opt "dv")

	# Check to see if we're set up for ssh keys on the host. Note that the
	# configuration file sets the username to use for the fun-on-demand cluster.
	CLI.run v ssh -vn \
			-o 'PasswordAuthentication no' \
			-o 'BatchMode yes' \
			"$O_HOST" 2>&1 | grep -qE '^Authenticated to'
	if [ $? -ne 0 ]; then
		CLI.warn "bootstrapping authentication to $O_HOST..."

		CLI.run v sshauth $v_arg -k "$HOME/.ssh/id_rsa4k.pub" "$O_HOST"
		CLI.die_check $? "authentication failed: $O_HOST"
	fi

	Fundle.submit "$O_HOST"
}

function __run()
{
	local chip="$1"
	local opts="$2"

	Fundle.run "$O_PLATFORM" "$opts"
}

function __debug()
{
	local chip="$1"
	local opts="$2"

	Fundle.run "$O_PLATFORM" "debug $opts"
}

# MARK: Command Implementation
function __cmd()
{
	local md=
	local m=
	local m_platform=
	local chip=
	local run_opts=

	md=$(Fundle.get_model_descriptor "$O_PRODUCT")
	CLI.die_ifz "$md" "failed to get machine descriptor: $O_PRODUCT"
	CLI.debug "machine descriptor: $O_PRODUCT => $md"

	Plist.init_with_raw "json" "$md"
	m=$(Plist.get_value "machine_targets" "string")
	CLI.die_ifz "$m" "failed to query machine target from: $md"

	# The hardware model is case-sensitive on the run_f1 side, but we let the
	# user specify any case they want, so re-normalize it based on what's in the
	# descriptor.
	O_PRODUCT=$(Plist.get_value "hardware_model" "string")

	# Find the chip and platform from the machine.
	chip=${m%-*}

	m_platform=${machine#*-}
	if [ -z "$m_platform" ]; then
		m_platform="soc"
	fi

	if [ -z "$O_PLATFORM" ]; then
		# If a platform was provided on the command line, it wins. Otherwise,
		# derive it from the machine.
		O_PLATFORM="$m_platform"
	fi

	# Normally we'd do this in the __main function, but since we do special
	# stuff to determine the platform, we check validity here.
	case "$O_ACTION" in
	fod)
		if [ "$O_PLATFORM" != "soc" ]; then
			CLI.die "platform not supported for $O_ACTION: $O_PLATFORM"
		fi
		;;
	run|debug)
		local sep=''

		if [ "$O_PLATFORM" != "posix" ] && [ "$O_PLATFORM" != "qemu" ]; then
			CLI.die "platform not supported for $O_ACTION: $O_PLATFORM"
		fi

		if [ -n "$O_DEBUG_SERVER" ]; then
			run_opts+="${sep}debug"
			sep=' '
		fi

		if [ -n "$O_DPC_SERVER" ]; then
			run_opts+="${sep}dpc"
			sep=' '
		fi
		;;
	esac

	for a in ${O_ACTIONS[@]}; do
		$a "$chip" "$run_opts" "$@"
	done
}

function __main()
{
	local me="$(basename ${BASH_SOURCE[0]})"
	local p=
	local base=
	local branch=
	local action_found=
	local fundev_test=

	CLI.init "$me" "$GIT_PARSEOPT_SPEC" "$@"
	eval "$(echo "$GIT_PARSEOPT_SPEC" |
		git rev-parse --parseopt --keep-dashdash --stuck-long -- "$@" \
				|| echo exit $?
	)"

	while [ $# -ne 0 ]; do
		local arg="$(CLI.parse_argument "$1")"
		local arg_opt=()
		local fw=
		local fwat=
		local fwb=
		local fws=

		case "$1" in
		-p | --project=*)
			arg_opt=($(CLI.split_specifier_nospace '@' "$arg"))
			fw="${arg_opt[0]}"
			fwat="$(initdefault "${arg_opt[1]}" "collection")"

			O_PROJECTS+=("$fw" "$fwat")
			shift
			;;
		-b | --merge-branch=*)
			arg_opt=($(CLI.split_specifier_nospace ':' "$arg"))
			fw="${arg_opt[0]}"
			fwb="${arg_opt[1]}"
			CLI.die_ifz "$fwb" "invalid branch specifier: $arg"

			O_BRANCHES+=("$fw" "$fwb")
			O_PROJECTS+=("$fw" "collection")
			shift
			;;
		-t | --tag-collection=*)
			O_TAG_COLLECTION="$arg"
			shift
			;;
		-T | --test-parameters=*)
			if [[ "$arg" =~ ^@ ]]; then
				fundev_test=t
			fi

			O_TEST_PARAMETERS="${arg#@*}"
			shift
			;;
		-w | --workspace*)
			O_WORKSPACE=$(CLI.get_option_argument "$1")
			if [ -z "$O_WORKSPACE" ]; then
				O_WORKSPACE=..
			fi

			O_WORKSPACE="$(realpath "$O_WORKSPACE")"
			shift
			;;
		-W | --live-workspace)
			O_LIVE_WORKSPACE=t
			shift
			;;
		-B | --build-cycle=*)
			case "$arg" in
			world|full|iterative|skip)
				O_BUILD_CYCLE="$arg"
				;;
			*)
				CLI.die_badopt "$arg" "build cycle"
				;;
			esac

			shift
			;;
		-s | --build-style=*)
			arg_opt=($(CLI.split_specifier_nospace ':' "$arg"))
			fw="${arg_opt[0]}"
			fws="${arg_opt[1]}"
			CLI.die_ifz "$fws" "invalid style specifier: $arg"

			O_STYLES+=("$fw" "$fws")
			shift
			;;
		-M | --makeflag=*)
			O_MAKEFLAGS+=("$arg")
			shift
			;;
		-j | --job-multiplier=*)
			O_JOB_MULTIPLIER="$arg"
			shift
			;;
		-P | --platform=*)
			O_PLATFORM="$arg"
			shift
			;;
		-V | --variant=*)
			O_VARIANT="$arg"
			shift
			;;
		-o | --output-bundle=*)
			O_OUTPUT_BUNDLE="$arg"
			shift
			;;
		-n | --cluster-number=*)
			O_HOST="$arg"
			shift
			;;
		-m | --email-address=*)
			O_EMAIL_ADDRESSES+=("$arg")
			shift
			;;
		-g | --debug-server*)
			O_DEBUG_SERVER=t

			arg_opt=($(CLI.parse_option_argument "$1"))
			if [ -n "${arg_opt[1]}" ]; then
				O_DEBUG_SERVER=${arg_opt[1]}
			fi
			shift
			;;
		-S | --dpc-server)
			O_DPC_SERVER=t
			shift
			;;
		--)
			shift
			break
			;;
		-*)
			# This was one of the common options that was already consumed by
			# the CLI module. git-rev-parse will not have normalized an
			# unrecognized option.
			shift
			;;
		*)
			break
			;;
		esac
	done

	CLI.init_git
	if [ -z "$O_TAG_COLLECTION" ]; then
		O_TAG_COLLECTION=$(synthesize_tag_collection)
		CLI.die_ifz "$O_TAG_COLLECTION" "failed to synthesize tag collection"
	fi

	# Implicitly add the currently-active git repository's branch to the
	# project list. If the user provides the project with a different base
	# tag, then the Assembly will automatically update itself, so we don't need
	# to do anything special to catch that case.
	p=$(Git.get_name)
	branch=$(Git.get_current_branch)
	G_PROJECT="$p"

	O_PROJECTS+=("$p" "collection")
	O_BRANCHES+=("$p" "$branch")

	if [ -z "$O_WORKSPACE" ]; then
		O_WORKSPACE=$(CLI.get_boot_state_path "ws")
	fi

	if [ -z "$O_HOST" ]; then
		local x=
		local cnt=${#G_USEABLE_INSTANCES[@]}

		x=$(rand 4 "u")
		x=$(( x % cnt ))
		O_HOST=${G_USEABLE_INSTANCES[$x]}
	fi

	O_HOST=$(printf '%02d' "$O_HOST")
	O_HOST="fun-on-demand-$O_HOST"
	CLI.status "using host: $O_HOST"

	if [ -n "$fundev_test" ]; then
		local fundev=
		local params=
		local pred="$O_TEST_PARAMETERS"

		fundev="$(realpath "../FunDevelopment")"
		CLI.die_ifz "$fundev" "no FunDevelopment repository: $fundev"

		if [[ ! "$pred" =~ \.params$ ]]; then
			pred+=".params"
		fi
		CLI.status "finding $pred in FunDevelopment..."

		CLI.pushdir "$fundev"
		params=$(find_first "$pred")
		CLI.die_ifz "$params" "no parameters file found: $pred"

		O_TEST_PARAMETERS="$(realpath "$params")"
		CLI.status "found parameters file: $O_TEST_PARAMETERS"
		CLI.popdir
	fi

	if [ $# -lt 2 -o "$1" == "--" ]; then
		CLI.die "must provide an action and chip"
	fi

	O_ACTION="$1"
	O_PRODUCT="$2"
	shift 2

	# Go through the list of generic actions and include everything up to and
	# including the specified action. If we cannot find the specified action,
	# we'll look in the test actions list, since test actions are all mutually
	# exclusive.
	for a in ${G_GENERIC_ACTIONS[@]}; do
		CLI.debug "will perform action: $a"
		O_ACTIONS+=("$a")

		if [ "$a" = "__$O_ACTION" ]; then
			action_found="$a"
			break
		fi
	done

	if [ -z "$action_found" ]; then
		for a in ${G_TEST_ACTIONS[@]}; do
			if [ "$a" = "__$O_ACTION" ]; then
				CLI.debug "will perform action: $a"

				O_ACTIONS+=("$a")
				action_found="$a"
				break
			fi
		done
	fi

	CLI.die_ifz "$action_found" "invalid action: $O_ACTION"

	if [ "$1" == "--" ]; then
		shift
	fi

	Module.dump "$me" "option"
	Module.dump_array "$me" "option" "BRANCHES" 2
	Module.dump_array "$me" "option" "PROJECTS" 2
	Module.dump_array "$me" "option" "STYLES" 2
	Module.dump_array "$me" "option" "MAKEFLAGS" 1
	Module.dump_array "$me" "option" "EMAIL_ADDRESSES" 2
	Module.dump_array "$me" "option" "ACTIONS" 1
	__cmd "$@"
}

__main "$@"
