#!/bin/bash

# Executable preamble
mydir="$(dirname $0)"
pushd "$mydir/.." > /dev/null; dotfun="$(pwd)"; popd > /dev/null
funlib="${dotfun}/lib"
dotfiles="${dotfun}"
[[ -d "$dotfun/../dotfiles" ]] && dotfiles="$dotfun/../dotfiles"
libdir="${dotfiles}/lib"

# Imports
. "${libdir}/Lib.sh"
. "${libdir}/Module.sh"

# Usage
GIT_PARSEOPT_SPEC="\
git [dotfun GIT-COMMAND|funrun COMMAND] [ARGUMENT ARGUMENT ...]

Runs a git command on the dotfun repository. When invoked as git-funrun,
COMMAND will be run from the in-development repository.
--
"
O_ACTION=__dotfun

# MARK: Command Implementation
function __dotfun()
{
	git --git-dir=$HOME/.dotfun --work-tree=$HOME "$@"
}

function __funrun()
{
	local what="$1"
	local where="$HOME/src/home/dotfun/bin"
	local cmd="$where/$what"

	if [ -f "$where/git-$what" ]; then
		cmd="$where/git-$what"
	fi

	shift
	"$cmd" "$@"
}

function __cmd()
{
	${O_ACTION} "$@"
}

function __main()
{
	local me="$(basename ${BASH_SOURCE[0]})"

	# We don't initialize the CLI module here since we're just a dumb shell to
	# run git commands on the dotfiles repo.
	eval "$(echo "$GIT_PARSEOPT_SPEC" |
		git rev-parse --parseopt --keep-dashdash --stuck-long \
				--stop-at-non-option -- "$@" \
				|| echo exit $?
	)"

	while [ $# -ne 0 ]; do
		local arg=""
		local arg_opt=()

		case "$1" in
		--)
			shift
			break
			;;
		-*)
			break
			;;
		*)
			break
			;;
		esac
	done

	if [ "$me" = "git-funrun" ]; then
		O_ACTION="__funrun"
	fi

	__cmd "$@"
}

__main "$@"
