#!/bin/bash -O extglob

# Executable preamble
mydir="$(dirname $0)"
pushd "$mydir/.." > /dev/null; dotfun="$(pwd)"; popd > /dev/null
funlib="${dotfun}/lib"
dotfiles="${dotfun}"
[[ -d "$dotfun/../dotfiles" ]] && dotfiles="$dotfun/../dotfiles"
libdir="${dotfiles}/lib"

# Imports
. "${libdir}/Lib.sh"
. "${libdir}/Module.sh"
. "${libdir}/CLI.sh"

# Usage
GIT_PARSEOPT_SPEC="\
funx [sdk|tool] COMMAND [ARGUMENT ARGUMENT ...]

Finds COMMAND in the specified SDK or contributor and runs it with the given \
argument list. COMMAND may refer to a shell script or Python script with or \
without the corresponding '.sh' or '.py' suffixes.

The first positional argument may be provided and accepts the following values:

    sdk         Search FunSDK for COMMAND
    tool        Search FunTools for COMMAND

If unspecified, 'sdk' is assumed.

$(CLI.get_stuckopt_blurb)
--
 Available options
r,search-root=SEARCH-ROOT     Search for COMMAND in SEARCH-ROOT
p,print-path                  Print the path to COMMAND without executing it
w,working-directory           Change the working directory to the SDK. Some \
tools require being run from within the SDK, and this option makes that a bit \
easier

$(CLI.get_global_blurb)
"
O_SEARCH_ROOT=
O_PRINT_PATH=
O_WORKING_DIRECTORY=
O_COMMAND=

# MARK: Utilities
function best_match()
{
	local existing="$1"
	local candidate="$2"
	local base_existing=$(basename "$existing")
	local base_candidate=$(basename "$candidate")

	# There is no existing match, so the candidate wins.
	if [ -z "$existing" ]; then
		echo "$candidate"
		return
	fi

	# We go with the shortest name match.
	if [ ${#base_candidate} -lt ${#base_existing} ]; then
		echo "$candidate"
		return
	fi

	echo "$existing"
	return
}

# MARK: Command Implementation
function __cmd()
{
	local pred="$O_COMMAND"
	local candidates=()
	local best_match=
	local cmd=

	# If the user specified the suffix, then we want an exact match on it.
	# Otherwise, we'll use what the user specified as a base name.
	case "$pred" in
	*.sh|*.py)
		;;
	*)
		best_match=t
		pred+='*'
		;;
	esac

	candidates=($(CLI.command find "$O_SEARCH_ROOT" -name "$pred"))
	if [ ${#candidates[@]} -eq 0 ]; then
		CLI.die "no candidates found for command: $O_COMMAND"
	fi

	for c in "${candidates[@]}"; do
		CLI.status "evaluating candidate: $c"

		# Skip Linux tools.
		if [[ "$c" =~ Linux ]]; then
			CLI.status "candidate is Linux-specific: $c"
			continue
		fi

		# Skip anything in the git directory.
		if [[ "$c" =~ \/.git\. ]]; then
			continue
		fi

		# Skip anything that's not executable.
		if [ ! -x "$c" ]; then
			continue
		fi

		# We found a candidate. If we were going with an exact match, then we're
		# good. But if we were fuzzy matching, find the shortest match.
		if [ -z "$best_match" ]; then
			CLI.status "candidate is executable: $c"
			cmd="$c"
			break
		else
			cmd="$(best_match "$cmd" "$c")"
		fi
	done

	CLI.die_ifz "$cmd" "no executable candidates found"

	if [ -n "$O_PRINT_PATH" ]; then
		echo "$cmd"
	else
		if [ -n "$O_WORKING_DIRECTORY" ]; then
			CLI.status "changing working directory to: $O_WORKING_DIRECTORY"
			cd "$O_WORKING_DIRECTORY"
		fi

		PYTHONWARNINGS=ignore CLI.command "$cmd" "$@"
	fi
}

function __main()
{
	local me="$(basename ${BASH_SOURCE[0]})"

	CLI.init_trampoline "$me" "$GIT_PARSEOPT_SPEC" "$@"
	eval "$(echo "$GIT_PARSEOPT_SPEC" |
		git rev-parse --parseopt --keep-dashdash --stuck-long \
				--stop-at-non-option -- "$@" \
				|| echo exit $?
	)"

	while [ $# -ne 0 ]; do
		local arg="$(CLI.parse_argument "$1")"
		local arg_opt=()

		case "$1" in
		-r | --search-root=*)
			O_SEARCH_ROOT="$arg"
			shift
			;;
		-p | --print-path)
			O_PRINT_PATH=t
			shift
			;;
		-w | --working-directory)
			O_WORKING_DIRECTORY="$SDKDIR"
			shift
			;;
		--)
			shift
			break
			;;
		-*)
			# This was one of the common options that was already consumed by
			# the CLI module. git-rev-parse will not have normalized an
			# unrecognized option.
			shift
			;;
		*)
			break
			;;
		esac
	done

	case "$1" in
	sdk)
		if [ -z "$O_SEARCH_ROOT" ]; then
			O_SEARCH_ROOT="$SDKDIR"
		fi
		shift
		;;
	tool)
		if [ -z "$O_SEARCH_ROOT" ]; then
			O_SEARCH_ROOT="$SDKDIR/../FunTools"
			O_SEARCH_ROOT=$(realpath "$O_SEARCH_ROOT")
		fi
		shift
		;;
	*)
		O_SEARCH_ROOT="$SDKDIR"
		;;
	esac

	if [ $# -lt 1 ]; then
		CLI.die_noopt "command name"
	fi

	O_COMMAND="$1"
	shift

	__cmd "$@"
}

__main "$@"
