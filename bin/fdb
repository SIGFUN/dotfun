#!/bin/bash -O extglob

# MARK: Executable preamble
mydir="$(dirname $0)"
pushd "$mydir/.." > /dev/null; dotfun="$(pwd)"; popd > /dev/null
funlib="${dotfun}/lib"
dotfiles="${dotfun}"
[[ -d "$dotfun/../dotfiles" ]] && dotfiles="$dotfun/../dotfiles"
libdir="${dotfiles}/lib"

# MARK: Imports
. "${libdir}/Lib.sh"
. "${libdir}/Module.sh"
. "${libdir}/CLI.sh"
. "${libdir}/Bytes.sh"

# MARK: Globals
G_QEMU_PORT=1234
G_POSIX_PORT=4321

# MARK: Parsed options
GIT_PARSEOPT_SPEC="\
fdb [options] [IMAGE-OR-CORE] [--] [arguments to debugger or debug server]

Debug the core file referred to by IMAGE-OR-CORE with the FunOS gdb server. If \
no IMAGE-OR-CORE is provided, trampolines into the MIPS gdb (without running a \
gdb server) and passes it the remaining arguments.

$(CLI.get_stuckopt_blurb)
--
 Available options
a,attach                          Debug a live Qemu or POSIX image on the host \
with the appropriate debugger. POSIX images are debugged with lldb, otherwise \
images are debugged with the gdb from the MIPS cross-compilation package

s,server                          Trampoline to the Fungible debug server if \
no IMAGE-OR-CORE is provided

k,sdk=SDK-DIRECTORY               Use the SDK in SDK-DIRECTORY. If not \
specified, the SDKDIR environment variable is used

$(CLI.get_global_blurb)
"

O_SDK="$SDKDIR"
O_IMAGE_OR_CORE=
O_ACTION=__run

# MARK: Command Implementation
function __qemu_attach()
{
	local gdb_mips="$1"
	local gdbserver="$2"
	local cmds=(
		"target remote localhost:$G_QEMU_PORT"
	)
	local gdb_argv=()

	gdb_argv+=("$gdb_mips")
	for cmd in "${cmds[@]}"; do
		gdb_argv+=("--ex" "$cmd")
	done

	gdb_argv+=("$O_IMAGE_OR_CORE")

	shift 2
	CLI.command "${gdb_argv[@]}" "$@"
}

function __posix_attach()
{
	local gdb_mips="$1"
	local gdbserver="$2"
	local cmds=(
		"-O"
		"target create $O_IMAGE_OR_CORE"
		"-O"
		"gdb-remote localhost:$G_POSIX_PORT"
	)
	local lldb_argv=(
		"xcrun"
		"-sdk"
		"macosx"
		"lldb"
	)

	for cmd in "${cmds[@]}"; do
		lldb_argv+=("$cmd")
	done

	shift 2
	CLI.command "${lldb_argv[@]}" "$@"
}

function __server()
{
	local gdb_mips="$1"
	local gdbserver="$2"
	local varg=$(CLI.get_verbosity_opt "dv")
	local qarg=$(CLI.get_verbosity_opt "dq")

	CLI.command pip show $varg $qarg python-idzip
	if [ $? -ne 0 ]; then
		CLI.command pip install $varg $qarg python-idzip
	fi

	shift 2
	CLI.command "$gdbserver" "$@"
}

function __run()
{
	local gdb_mips="$1"
	local gdbserver="$2"

	shift 2
	CLI.command "$gdb_mips" "$@"
}

function __cmd()
{
	local gdb_mips="/Users/Shared/cross/mips64/bin/mips64-unknown-elf-gdb"
	local gdbserver="$O_SDK/bin/scripts/fungdbserver.py"

	$O_ACTION "$gdb_mips" "$gdbserver" "$@"
}

function __main()
{
	local me="$(basename ${BASH_SOURCE[0]})"
	local image_file=
	local expect_file=

	CLI.init "$me" "$GIT_PARSEOPT_SPEC" "$@"
	eval "$(echo "$GIT_PARSEOPT_SPEC" |
		git rev-parse --parseopt --keep-dashdash --stuck-long -- "$@" \
				|| echo exit $?
	)"

	while [ $# -ne 0 ]; do
		local arg="$(CLI.parse_argument "$1")"
		local arg_opt=()

		case "$1" in
		-a | --attach)
			image_file=t
			expect_file=t
			shift
			;;
		-s | --server)
			O_ACTION=__server
			shift
			;;
		-k | --sdk=*)
			O_SDK="$arg"
			shift
			;;
		--)
			shift
			break
			;;
		-*)
			# This was one of the common options that was already consumed by
			# the CLI module. git-revparse will not have normalized an
			# unrecognized option.
			shift
			;;
		*)
			break
			;;
		esac
	done

	if [ -n "$expect_file" ]; then
		if [ $# -lt 1 ]; then
			CLI.die_noopt "image or core file"
		fi

		O_IMAGE_OR_CORE="$1"
		shift
	fi

	if [ -n "$image_file" ]; then
		local type=

		type=$(file "$O_IMAGE_OR_CORE")
		case "$type" in
		*Mach-O*)
			O_ACTION=__posix_attach
			;;
		*)
			O_ACTION=__qemu_attach
			;;
		esac
	fi

	CLI.die_ifz "$O_SDK" "must specify an SDK or set SDKDIR"
	__cmd "$@"
}

__main "$@"
